generator client {
  provider      = "prisma-client-js"
  output        = "../app/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Invoice   Invoice[]

  @@unique([email, userId])
  @@index([userId])
}

model Invoice {
  id           Int           @id @default(autoincrement())
  amount       Float
  pending      Boolean       @default(true)
  purchaseDate DateTime
  customerId   Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  InvoiceItem  InvoiceItem[]

  @@index([userId])
}

model InvoiceItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  unitPrice Float
  productId Int
  invoiceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  Invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  price         Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  InvoiceItem   InvoiceItem[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  StockMovement StockMovement[]

  @@index([userId])
}

model StockMovement {
  id        Int         @id @default(autoincrement())
  productId Int
  quantity  Int
  date      DateTime
  reason    StockReason
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  Product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Customer      Customer[]
  Invoice       Invoice[]
  InvoiceItem   InvoiceItem[]
  Product       Product[]
  sessions      Session[]
  StockMovement StockMovement[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum StockReason {
  COMPRA
  VENDA
  AJUSTE_POSITIVO
  AJUSTE_NEGATIVO
  OUTRO
}
